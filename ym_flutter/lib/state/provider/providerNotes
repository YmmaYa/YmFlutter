
Provider 是 Flutter 官方推荐的轻量级状态管理解决方案，
    ** 基于 InheritedWidget，通过 Provider+Consumer 在数据变化时刷新整个子树。
    ** 子树刷新：Provider 更新时会重建所有依赖的 Consumer Widget。

-------------------------------------------------------------

    ** 定   位：    专注于状态管理（官方推荐，基于 InheritedWidget）
    ** 学习曲线：    需要理解 Provider/Consumer 机制
    ** 性   能：    高（依赖 InheritedWidget 的树刷新）
    ** 代码简洁性：  ⭐⭐⭐（需模板代码，如 Consumer）
    ** 依赖注入：    需依赖 context 或结合 ProxyProvider
    ** 路由管理：    需使用原生 Navigator 或第三方库（如 go_router）
    ** 国际化/主题： 需手动实现或依赖其他包
    ** 适用场景：    中小型项目（官方稳定方案）

1. Provider 的核心思想是：
    (1)数据提供者：   将状态对象提供给 widget 树
    (2)消费者：      在需要的地方获取和使用状态
    (3)状态变更通知： 当数据变化时自动重建依赖的 widget

2. 添加依赖
    在 pubspec.yaml 中添加：
       dependencies:
          provider: ^6.0.5

3.选 Provider 如果：
        你偏好 Flutter 官方推荐 的稳定方案。
        项目已使用 Provider 生态（如 Riverpod）。
        需要 更精细的控制（如自定义 InheritedWidget）。

常见问题1: 数据更新后，widget不更新 ？
    （1）检查 Provider 是否包裹了顶层 Widget；
    （2）检查 数据更新后 notifyListeners 是否调用；
    （3）检查widget是否设置consumer
    （4）另外，如果widget不在同一个Provider树下，，数据也不会共享。

