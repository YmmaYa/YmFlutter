

✅ 匿名函数: 一种 没有名称 的函数
    ** 也称为：lambda 函数、闭包
    ** 可以直接作为 表达式 使用 或 赋值给 变量 。

✅ 基本语法：
    (参数1, 参数2, ...) {
      函数体
      return 返回值; // 可选
    }

✅ 示例：
    ** 1. 简单匿名函数
    ** 2. 箭头语法（单行函数）
    ** 3. 作为参数传递
    ** 4. 立即执行匿名函数
    ** 5. 闭包特性 ：匿名函数可以访问其词法作用域中的变量

✅ 注意事项：
    1. 当匿名函数没有参数时，参数列表可以为空或使用下划线 _；
    2. 如果匿名函数只有一个参数，可以省略参数类型和括号（使用箭头语法时）；
    3. 匿名函数可以赋值给变量，也可以直接作为参数传递。

✈️ 匿名函数在 Dart 中非常常用，特别是在处理集合操作（如 map、where、forEach 等）和异步编程（如 Future 和 Stream 的回调）时。

------------------------------------ 立即执行匿名函数 ------------------------------------
‼️‼️ (){}() 是 Dart 中一种定义并立即执行匿名函数的语法结构，也称为 立即调用函数表达式；
   ❄️ 语法结构解析：
       () {
         // 函数体
       }();
   ❄️ 这个结构可以分为三部分理解：
        ** (){} - 定义一个匿名函数
        ** () - 调用这个函数
        ** 组合起来 (){}() - 定义后立即调用
   ❄️ 使用示例：
        ** 1. 基本用法
        ** 2. 带参数的版本
        ** 3. 返回值
   ❄️ 实际应用场景
        ✅ 1. 创建独立作用域 - 避免变量污染全局作用域；
        ✅ 2. 初始化复杂对象；
        ✅ 3. 异步代码的立即执行；
        ✅ 4. 模块化代码 - 将相关代码组织在一起
   ❄️ 注意事项
        ✅ 1. 分号位置很重要，必须放在调用括号 () 之后;
        ✅ 2. 可以赋值给变量，但这样就失去了立即执行的特性;
        ✅ 3. 在 Dart 中这种模式不那么常用，直接使用命名函数或普通代码块可能更为常见;
