
【实例见：dart_demo1.dart】
在 Dart 中，参数的传递方式是 值传递｜引用传递，取决于数据的类型。

1. 基本类型（值类型）
    ❄️ 包括：int、double、bool、String、num 等。
    ❄️ 传递方式：值传递（传递的是值的副本）。

2. 对象类型（引用类型）
    ❄️ 包括：自定义类实例、List、Map、Set 等。
    ❄️ 传递方式：引用值的传递（传递的是引用的副本，而非对象本身的副本）。
    ❄️ 关键点：
        ⚠️ 函数内可以修改对象的内容（因为引用指向原对象）。
        ⚠️ 但无法直接修改外部的引用指向（因为传递的是引用的副本）。

3. 总结
（1）基本类型：值传递，不能修改原值
（2）对象类型：引用值的传递，可修改对象内容，不能重定向外部引用

4. 为什么这样设计？
Dart 的这种机制（共享引用的值传递）平衡了效率和安全性：
    ❄️ 效率：避免复制大对象（如集合）。
    ❄️ 安全性：防止意外修改外部引用（如直接替换对象）。
    ❄️ 如果需要完全隔离数据，可以显式创建副本：
            void processList(List<int> list) {
              list = List.from(list); // 创建副本
              list.add(100); // 仅影响副本
            }
