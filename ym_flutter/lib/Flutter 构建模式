
📒 Flutter 的构建模式选择：
** Flutter 支持三种模式编译 app，也支持使用 headless 模式来测试。
** 选择哪种编译模式取决于你处于哪个开发周期中。
（是调试代码阶段，还是需要性能优化分析，或是准备部署你的应用了呢？）

三种构建模式：
（1）开发过程中，需要使用 热重载 功能，请选择 debug 构建模式；
（2）当你需要分析性能的时候，选择使用 profile 构建模式；
（3）发布应用的时候，需要选择使用 release 构建模式。

✈️调试模式：
在 Debug 模式下，app 可以被安装在物理设备、仿真器或者模拟器上进行调试。
    Debug 模式意味着：
        ** 断点 是开启的。
        ** 服务扩展是开启的。
        ** 针对快速开发和运行周期进行了编译优化（但不是针对执行速度、二进制文件大小或者部署）。
        ** 调试开启，类似 开发者工具 等调试工具可以连接到进程里。
    ⚠️ 默认情况下，运行 flutter run 会使用 Debug 模式。
    🔔提示：
    （1）热重载功能仅能在调试模式下运行；
    （2）仿真器和模拟器仅能在调试模式下运行；
    （3）在调试模型下，应用的性能可能会掉帧或者卡顿， profile 模式下会更接近真机性能。

✈️Release 模式：
当你想要最大的优化以及最小的占用空间时，就使用 Release 模式来部署 app 吧。
release 模式是不支持模拟器或者仿真器的，
    使用 Release 模式意味着：
        ** 断点是不可用的。
        ** 调试信息是不可见的。
        ** 调试是禁用的。
        ** 编译针对快速启动、快速执行和小的 package 的大小进行了优化。
        ** 服务扩展是禁用的。
    ⚠️ flutter run --release 命令会使用 Release 模式来进行编译。

✈️Profile 模式：
在 profile 模式下，一些调试能力是被保留的—足够分析你的 app 性能。
在仿真器和模拟器上，Profile 模式是不可用的，因为他们的行为不能代表真实的性能。
    profile 模式和 release 类似，但有以下不同：
            ** 一些服务扩展是启用的。例如，支持 performance overlay。
            ** Tracing 是启用的，一些调试工具，比如 开发者工具 可以连接到进程里。
    ⚠️ flutter run --profile 命令是使用 Profile 模式来编译的。