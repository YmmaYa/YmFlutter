
‼️ 什么是BuildContext，它有什么用？

（1）Widget 树定位：它表示当前 Widget 在整个 Widget 树中的位置和上下文信息，通过它可以确定,2个 Widget 在树中的层次和相关关系。
（2）数据传递和获取：可以利用 BuildContext 来获取父级传递下来的各种数据，比如主题、路由信息等。
（3）资源查找：能够基于此找到附近范围内的资源，例如特定的样式、本地化字符串等。
（4）导航和路由操作：在进行页面导航等操作时需要用到 BuildContext 来执行相关操作。
-----------------------------------------
一、本质理解
✅ BuildContext 本质是一个抽象类，具体实现是 Element 对象。每个 widget 在树中对应一个 Element，而 Element 就实现了 BuildContext 接口；
✅ 与 widget 的临时性不同，BuildContext 的生命周期与 Element 一致；

二、核心用途
✅ 1. Widget 树导航
    ** 向上查找父级widget
    ** 查找最近的Theme数据
    ** 导航操作
✅ 2. 状态管理
    ** 获取祖先State
    ** 监听InheritedWidget变更
✅ 3. 媒体查询与布局
    ** 获取屏幕尺寸
    ** 获取当前渲染对象的边界框

三、框架内部工作原理
当执行 widget.build(context) 时：
    ✅ 1、上下文准备：框架创建或复用对应的 Element，并将其作为 BuildContext 传入
    ✅ 2、依赖追踪
            // 伪代码：框架内部处理依赖
            void performRebuild() {
              _dependencies?.clear();
              super.performRebuild(); // 触发widget.build
              _finalizeDependencies();
            }
    ✅ 3、脏标记传播
        当依赖的 InheritedWidget 变化时，通过 notifyClients() 触发关联 Element 重建

‼️ 常见问题1: 异步回调中直接使用build时的context ？
                ❌：// 危险！异步回调中直接使用build时的context
                    Future.delayed(Duration(seconds: 1), () {
                      Navigator.pop(context); // 可能已dispose
                    });

                ✅：// 安全做法
                final currentContext = context;
                if (currentContext.mounted) {...}