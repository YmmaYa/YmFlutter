
在 Flutter 开发中，if (!mounted) return; 是一个 关键的安全检查，用于防止在 Widget 已从树中移除（disposed）后仍然尝试更新其状态。

✅ 本质：mounted 是 State 类的布尔属性，表示该 State 是否仍关联到活跃的 Element。

✅ 生命周期：
    ❄️：在 initState 初始化后变为true
    ❄️：在 dispose 后变为false

✅ 高级应用技巧：
    1. 封装安全执行器
    2. 结合 ChangeNotifier

------------------------------------------------
📒 何时需要检查？‼️
场景	            必须检查	    典型案例
异步回调	        ✅	        HTTP请求完成回调
定时器	        ✅	        Timer/Future.delayed
动画监听	        ✅	        AnimationController 监听
直接同步构建过程	❌	        build() 方法内

📒 为什么需要手动检查？‼️
❄️ Flutter 使用 声明式框架，Widget 可能随时被重建/移除
❄️ 异步操作与 UI 生命周期不同步

📒 使用场景‼️
❄️ 所有 async 方法内
❄️ 任何可能延迟执行的代码块
❄️ 跨帧操作（如动画回调）

📒 优化建议‼️
❄️ 在 dispose() 中取消所有异步操作
❄️ 使用 CancelableOperation 包装任务
❄️ 对频繁操作封装安全检查扩展
------------------------------------------------

与其他平台的对比‼️
平台	        类似机制	                        区别
Android	    isDestroyed	                    基于 Activity 生命周期
iOS	        isViewLoaded	                关联 ViewController
Web         (React)	isMounted (已弃用)	    改用 cleanup 函数

✅ 底层机制
    Flutter 框架通过以下方式维护 mounted 状态：
        ✈️ 1.挂载阶段
                // 框架内部代码简化
                void mount(Element parent, dynamic newSlot) {
                  _state.mounted = true;
                  _state._element = this;
                }
        ✈️ 2.卸载阶段
                void unmount() {
                  _state._element = null;
                  _state.mounted = false;
                }
        ✈️ 3.状态更新保护
                void setState(VoidCallback fn) {
                  assert(mounted, "Cannot call setState() on a disposed widget");
                  // ...执行更新
                }